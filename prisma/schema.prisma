// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  password    String?
  role        String
  image       String?
  accounts    Account[]
  sessions    Session[]
  Transaction Transaction[]
  history     History[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  code      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Item      Item[]
  history   History[]
}

model Item {
  id           String              @id @default(uuid())
  name         String
  category     Category            @relation(fields: [categoryId], references: [id])
  categoryId   String
  price        Int
  image        String?
  stock        Stock?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime?           @updatedAt
  transactions TransactionDetail[]
  history      History[]
}

model History {
  id         String    @id @default(uuid())
  field      String
  name       String
  table      String
  oldValue   String
  newValue   String
  modifiedBy String
  userId     String?
  categoryId String?
  supplierId String?
  outletId   String?
  itemId     String?
  stockId    String?
  user       User?     @relation(fields: [userId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  outlet     Outlet?   @relation(fields: [outletId], references: [id])
  item       Item?     @relation(fields: [itemId], references: [id])
  stock      Stock?    @relation(fields: [stockId], references: [id])
  createdAt  DateTime  @default(now())
}

model Stock {
  id           String    @id @default(uuid())
  quantity     Int
  prevQuantity Int
  itemId       String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  item         Item      @relation(fields: [itemId], references: [id])
  history      History[]
}

model Supplier {
  id          String        @id @default(uuid())
  name        String
  address     String
  phone       String        @unique
  email       String?       @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  Transaction Transaction[]
  history     History[]
}

model Outlet {
  id          String        @id @default(uuid())
  name        String
  address     String
  phone       String        @unique
  email       String?       @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  Transaction Transaction[]
  history     History[]
}

model Transaction {
  id              String              @id @default(uuid())
  type            TransactionType
  totalPrice      Int
  transactionDate DateTime
  letterCode      String
  supplierId      String?
  userId          String?
  outletId        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime?           @updatedAt
  user            User?               @relation(fields: [userId], references: [id])
  supplier        Supplier?           @relation(fields: [supplierId], references: [id])
  outlet          Outlet?             @relation(fields: [outletId], references: [id])
  detail          TransactionDetail[]
}

enum TransactionType {
  ISSUING
  RECEIVING
}

model TransactionDetail {
  id            String      @id @default(uuid())
  transactionId String
  itemId        String
  quantity      Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([transactionId, itemId])
}

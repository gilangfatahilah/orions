// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @default(cuid())
  name        String?
  email       String        @unique
  password    String?
  role        String
  image       String?
  accounts    Account[]
  sessions    Session[]
  Transaction Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  code      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Item      Item[]
}

model Item {
  id           String            @id @default(uuid())
  name         String
  category     Category          @relation(fields: [categoryId], references: [id])
  categoryId   String            @unique
  price        Int
  image        String?
  stock        Stock?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime?         @updatedAt
  transactions ItemTransaction[]
}

model Stock {
  id        String    @id @unique
  quantity  Int
  status    String?
  Item      Item      @relation(fields: [itemId], references: [id])
  itemId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Supplier {
  id          String        @id @default(uuid())
  name        String
  address     String
  phone       String        @unique
  email       String?       @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  Transaction Transaction[]
}

model Outlet {
  id          String        @id @default(uuid())
  name        String
  address     String
  phone       String        @unique
  email       String?       @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  Transaction Transaction[]
}

model Transaction {
  id              String            @id @default(uuid())
  transactionType String
  quantity        Int
  totalPrice      Int
  transactionDate DateTime
  supplier        Supplier          @relation(fields: [supplierId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  supplierId      String
  userId          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  outlet          Outlet?           @relation(fields: [outletId], references: [id])
  outletId        String?
  items           ItemTransaction[]
}

model ItemTransaction {
  itemId        String
  transactionId String
  item          Item        @relation(fields: [itemId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@id([itemId, transactionId])
}

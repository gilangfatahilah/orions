// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String        @id @default(uuid())
  name        String?
  email       String        @unique
  password    String
  role        String
  image       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  Transaction Transaction[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Item      Item[]
}

model Item {
  id          String        @id @default(uuid())
  name        String
  Category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  Stock       Stock[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  Transaction Transaction[]
}

model Stock {
  id        String    @id @unique
  quantity  Int
  price     Int
  status    String
  Item      Item      @relation(fields: [stockId], references: [id])
  stockId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Supplier {
  id          String        @id @default(uuid())
  name        String
  address     String
  phone       String?       @unique
  email       String?       @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  Transaction Transaction[]
}

model Transaction {
  id              String    @id @default(uuid())
  transactionType String
  quantity        Int
  totalPrice      Int
  transactionDate DateTime
  Item            Item      @relation(fields: [itemId], references: [id])
  Supplier        Supplier  @relation(fields: [supplierId], references: [id])
  User            User      @relation(fields: [userId], references: [id])
  itemId          String
  supplierId      String
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
}
